CISC 3300 S25 
Homework 7 
1. What is a class? What is an object? What is OOP? 
Classes are templates for creating objects. Object is an instance of a class. OOP is Object Oriented programming.


2. Why use an abstract class in OOP? 


3. What are superglobals in PHP, what are some examples of data they provide? 
Superglobals are predefined variables in PHP that are available in all scopes throughout a script. They don't need a global$ variable. The $SERVER array provides information about the environment and the execution. The $GET array retrieves data from URL parameters. 


4. What are the two steps to setting up and using a class via namespaces? 
* Define a namespace in the class where it should be used
* Go to the place where we want to use the class
   * Type out the full namespace when we want to use that class
   * Or import the class into the current namespace with the use keyword
      * Use the path file with “use” and then just set the class=Post()


5. What is MVC? Detail the different parts. 
MVC is an architectural/ design pattern that separates an application into three parts: Model, View, and Controller. Each component is built to handle specific development aspects of an application. 
Model Layer
* Can retrieve or add data from the database
Controller
* Intermediary between the view and the model
* Tells the model what to do
* Fetches data from the model
View
* UI side of the application
* Generates a user interface




6. If I had a resource called users in my application that was designed with RESTFUL URI design, what would the URI and HTTP verbs be for: 
a. getting all users  
* GET
* /users
b. getting one users 
* GET
* /users/{id}
c. saving a user 
* POST
* /users
d. editing a user 
* PATCH
* /users/{id}
e. deleting a user 
* DELETE
* /users/{id}
7. Create a PHP project in an MVC style. It should have the ability to submit a new note resource, a note should have a title and a description. 


The title of the note should be more than 3 characters long and the description should be more than 10 characters long. 
Any special characters should be converted to HTML entities. 
On the frontend show a success message if the request is successful and an error message if anything is wrong. Add some basic styling. 
a. no need for a model class, the validation can happen in a controller method.